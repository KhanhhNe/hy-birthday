import { FullScreen, useFullScreenHandle } from "react-full-screen"
import {
  ArrowsPointingOutIcon,
  ArrowRightCircleIcon,
  ArrowsPointingInIcon,
  PauseCircleIcon,
  PlayCircleIcon,
  BackspaceIcon,
} from "@heroicons/react/24/solid"
import {
  ArrowRightIcon as OutlinedArrowRightIcon,
  ArrowPathIcon,
} from "@heroicons/react/24/outline"
import React, { useRef, useState, useEffect } from "react"
import "./index.css"

type Video = {
  title: string
  body: string
}

const videosMap = {
  "31-3": {
    title: "31/3/2018",
    body: "Ngo·∫°i kh√≥a THPT L√™ Qu√Ω ƒê√¥n ƒêN - Sun World c√πng l·ªõp. L·∫ßn ƒë·∫ßu m ƒëi xe hong say hong n√¥n g√¨ c·∫£, ra l√† do ƒë∆∞·ª£c k√™ tay ng·ªß su·ªët 6 ti·∫øng ng·ªìi xe üí™",
  },
  "16-6": {
    title: "16/6/2019",
    body: 'ƒê·ªìi Thi√™n An (with S∆∞∆°ng). L√¢u l√¢u c√≥ d·ªãp tr·∫£i nghi·ªám "picnic" hehe. Nh√¢n danh ch·ª•p ·∫£nh c√°i m tranh th·ªß ƒë√® ƒë·∫ßu c∆∞·ª°i c·ªï t ngay üò§',
  },
  "5-9": {
    title: "5/9/2019",
    body: "L·∫ßn ch·ª•p ·∫£nh ni c≈©ng l√† 1 l·∫ßn ch·ª•p ·∫£nh trong nh√¨u nh√¨u l·∫ßn t vs m ƒëi ch·ª•p ·∫£nh thui, nh∆∞ng t·∫°i th·∫•y ·∫£nh m h·ªìi ni c≈©ng cute n√™n coi nh∆∞ ƒë√¢y l√† c∆° h·ªôi ng·∫Øm m√¨nh trong qu√° kh·ª© z üò≥",
  },
  "25-5": {
    title: "25/5/2019",
    body: "M·ªôt trong nh·ªØng chuy·∫øn ƒëi ch∆°i xa h·ªìi c3 n√®. Tr·∫£i nghi·ªám l·∫ßn ƒë·∫ßu ng·ªß l·ªÅu, ngo√†i tr·ªùi c·ªßa m, ƒë·ª£t ni ch·ª•p 1 ƒë·ªëng ·∫£nh lun m√† h·ªìi n·ªõ ch·ª•p √≠u qu√° üòÖ",
  },
  "17-3": {
    title: "17/3/2019",
    body: "ƒêi ch∆°i ƒë·ªÅn Huy·ªÅn Tr√¢n C√¥ng Ch√∫a n√®. H·ªìi n·ªõ ch·ª•p ·∫£nh c√≤n nh√≠ nh·∫£nh ghia üòÅ ki·∫øm m√¥ ra c√°i que xong v√°c ƒëi ch·ª•p ƒë·ªß th·ª© ki·ªÉu",
  },
  "29-9": {
    title: "29/9/2020",
    body: "ƒê·ª£t ni ƒëi ch∆°i xa vs h·ªôi b√†n ƒë·∫ßu, m√† d·∫≠y c·ª±c s·ªõm lu√¥n ƒë·ªÉ c√≤n xu·ªëng ƒë√≥n m cho k·ªãp. Ch·∫°y g·∫ßn n·ª≠a c√°i ƒë√®o xong xe tk ƒê·∫°t h·∫øt xƒÉng n√™n l·∫°i th√¥i, m√† v·∫´n ch∆∞a bi·∫øt c·∫ßu v√≤m nh√¨n ra rƒÉng lu√¥n üòÑ",
  },
  "18-7": {
    title: "18/7/2020",
    body: "R·ªß nhau ƒëi bi·ªÉn camping n√®, m√† ch·ªó ngta h·∫°n ch·∫ø ƒë·ªët l·ª≠a m√† m√¨nh c·ª© li·ªÅu m·∫°ng nh√≥m l√™n n∆∞·ªõng üòÇ ch√≠n c√≥ s·ªëng c√≥ ch√°y c√≥ nh∆∞ng m√† zui",
  },
  "21-2": {
    title: "21/2/2020",
    body: "Gh√© tr∆∞·ªùng ch∆°i h·ªìi nƒÉm 1 n√®. L·∫ßn ƒë·∫ßu tr·∫£i nghi·ªám c·∫£m gi√°c c·ª±u hsinh v·ªÅ thƒÉm tr∆∞·ªùng, c·∫£m gi√°c ng·∫ßu h·∫≥n üòé",
  },
  "13-5": {
    title: "13/5/2020",
    body: "T·ªëi chu·ªìn h·ªçc ƒëi ƒÉn ch∆°i n√®. ƒê·ª£t ni t m·ªõi l√†m qu·∫£ ƒë·∫ßu m·ªõi m ch√™ qu√° tr·ªùi ch√™ lu√¥n üòÇ n√™n l√† h v·∫´n t√≥c th·∫£ t·ª± do truy·ªÅn th·ªëng ƒë√≥a",
  },
  "6-6": {
    title: "6/6/2020",
    body: "R·ªß nhau ƒëi ƒÉn n∆∞·ªõng Kicochi n√®. Qu√°n ni l√† m·ªôt trong nh·ªØng qu√°n n∆∞·ªõng uy t√≠n ·ªü Hu·∫ø m√† c·ª© nghƒ© t·ªõi n∆∞·ªõng l√† m√¨nh ƒëi √°, ti·∫øc l√† h kh√°c trc nh√¨u r√πi ü•∫",
  },
  "1-10": {
    title: "1/10/2020",
    body: 'Chuy·∫øn ƒëi Nha Trang ƒë√°ng nh·ªõ m√† mn v·∫´n hay n√≥i l√† m ƒëi thi t ƒëi th√°p t√πng. Tr·∫£i nghi·ªám du l·ªãch "t·ª± t√∫c", ƒÉn v·∫∑t, l∆∞·ª£n l·ªù, n√≥i chung chuy·∫øn ƒëi ni siu ƒë√°ng nh·ªõ üëè',
  },
  "17-2": {
    title: "17/2/2021",
    body: "Ch·ª•p ·∫£nh c√¢y M·∫Øt Bi·∫øc n√®. Chu·∫©n b·ªã ƒë·ªß th·ª© ƒë·ªì lu√¥n, m√°y ·∫£nh, ch·∫£i chu·ªët l√†m ƒë·∫πp c√°c ki·ªÉu, h√™n c√°i l√† tr·ªùi h√¥m n·ªõ ƒë·∫πp d√£ man, nh√¨n l·∫°i v·∫´n th·∫•y m·∫•y t·∫•m ni ·∫•n t∆∞·ª£ng nh·∫•t trong s·ªë ·∫£nh c·ªßa m√¨nh üíñ",
  },
  "6-2": {
    title: "6/2/2022",
    body: "T·∫øt l√† ph·∫£i t·ª• t·∫≠p ch·ªõ, ti·∫øc c√°i l√† ch∆°i th√¨ nh√¨u m√† ·∫£nh th√¨ √≠t, t·ª± nh·ªß m√¨nh ph·∫£i si√™ng ch·ª•p h∆°n thui ü§≤",
  },
  "3-12": {
    title: "3/12/2022",
    body: "L·∫ßn ƒë·∫ßu bi·∫øt t·ªõi c√¥ng vi√™n √Ånh S√°ng, m√† xui c√°i g·∫∑p tr·ªùi m∆∞a. ƒêang 2 ƒë·ª©a ƒë·ªôi qu·∫ßn tr·ªën m∆∞a m√† th·∫•y c·∫£nh ƒë·∫πp c≈©ng ƒë·ª©ng l·∫°i l√†m m·∫•y t·∫•m xong ch·∫°y ti·∫øp üòÜ chi·∫øn thi·ªát",
  },
  "21-1": {
    title: "21/1/2023",
    body: "L·∫ßn ƒë·∫ßu ƒë√≥n giao th·ª´a c√πng nhau üéÜ tuy l√† c√°i vƒÉn ngh·ªá h√¥m n·ªõ hong ·∫•n t∆∞·ª£ng l·∫Øm nh∆∞ng ƒëc c√°i ng·∫Øm ph√°o hoa zui, zui h∆°n n·ªØa khi l√† ng·∫Øm chung vs m ü•∞",
  },
  "31-1": {
    title: "31/1/2023",
    body: "L√¢u l√¢u ƒëi cf ch·ª•p h√¨nh 1 b·ªØa n√®. Ch·ª•p x·∫•u m gi·∫≠n qu√° tr·ªùi lun, nh∆∞ng r√πi c≈©ng l√†m l√†nh, c≈©ng zui z·∫ª l·∫°i ƒëc, z m·ªõi b·ªÅn ch·ªõ ƒë√∫ng hong üíò",
  },
}
type VideoId = keyof typeof videosMap

function VideoDisplay({
  title,
  body,
  videoLink,
  onContinue,
  onVideoLoaded,
}: {
  videoLink?: string
  onContinue?: () => void
  onVideoLoaded?: () => void
} & Video) {
  const videoElem = useRef<HTMLVideoElement>(null)
  const [isPlaying, setPlaying] = useState<boolean | null>(null)

  useEffect(() => {
    if (isPlaying && videoElem.current?.paused) {
      videoElem.current?.play()
    } else if (isPlaying === false && !videoElem.current?.paused) {
      videoElem.current?.pause()
    }
  }, [isPlaying])

  useEffect(() => {
    videoElem.current?.addEventListener("loadedmetadata", () => {
      onVideoLoaded?.()
    })

    videoElem.current?.addEventListener("play", () => {
      setPlaying(true)
    })

    videoElem.current?.addEventListener("pause", () => {
      setPlaying(false)
    })
  }, [videoLink])

  return (
    <div className="h-full w-full">
      <div className="absolute bottom-0 left-0 z-20 flex w-full flex-col gap-5 bg-gradient-to-t from-slate-900/75 via-slate-900/60 via-70% to-transparent p-5 pt-10">
        <div className="mx-2 flex flex-col gap-4">
          <h1 className="text-2xl font-bold">{title}</h1>
          <p>{body}</p>
        </div>
        <div className="flex h-[4rem] w-full justify-between">
          {isPlaying === true ? (
            <PauseCircleIcon
              className="h-full hover:cursor-pointer"
              onClick={() => setPlaying(false)}
            />
          ) : (
            <PlayCircleIcon
              className="h-full hover:cursor-pointer"
              onClick={() => setPlaying(true)}
            />
          )}
          <ArrowRightCircleIcon
            onClick={onContinue}
            className="h-full hover:cursor-pointer"
          />
        </div>
      </div>
      <div className="absolute left-0 top-0 z-10 h-[100vh] w-[100vw]">
        {videoLink && (
          <video
            src={videoLink}
            autoPlay={true}
            playsInline={true}
            loop={true}
            ref={videoElem}
            onPlaying={() => setPlaying(true)}
            className="h-full w-full object-cover"
          />
        )}
      </div>
    </div>
  )
}

function DaysQuiz({
  videosMap,
  videoReady,
  onGuessCorrect,
}: {
  videosMap: Record<string, Video>
  videoReady: boolean
  onGuessCorrect: (guess: VideoId) => void
}) {
  const [errorMsg, setErrorMsg] = useState<string | undefined>()
  const [guess, setGuess] = useState<{ day?: number; month?: number }>({})
  const [guessCorrect, setGuessCorrect] = useState(false)
  const [lastFocused, setLastFocused] = useState<"day" | "month">("day")

  const checkGuess = () => {
    if (!guess.day || !guess.month) {
      setErrorMsg("Nh·∫≠p th√≠u ng√†y th√≠u th√°ng k√¨a üò§")
      return
    }

    const guessId = `${guess.day}-${guess.month}`
    if (videosMap[guessId]) {
      setGuessCorrect(true)
      onGuessCorrect(guessId as VideoId)
    } else {
      setErrorMsg("Sai r·ªìi, hong ch∆°i ƒëo√°n m√≤ nha ‚õî")
    }
  }

  const addNumber = (number: number) => {
    if (lastFocused === "day") {
      guess.day = (guess.day ?? 0) * 10 + number
    } else {
      guess.month = (guess.month ?? 0) * 10 + number
    }
    setGuess({ ...guess })
  }

  const removeNumber = () => {
    if (lastFocused === "day") {
      guess.day = Math.floor((guess.day ?? 0) / 10) || undefined
    } else {
      guess.month = Math.floor((guess.month ?? 0) / 10) || undefined
    }
    setGuess({ ...guess })
  }

  useEffect(() => {
    if (videoReady) {
      setGuess({})
      setErrorMsg(undefined)
      setGuessCorrect(false)
    }
  }, [videoReady])

  return (
    <div className="flex h-full w-full flex-col items-center justify-center gap-5">
      <h1 className="mb-5 text-center text-5xl font-bold">Days Quiz</h1>
      <div className="grid auto-rows-auto grid-cols-2 gap-x-3 text-center">
        <div
          className={`quiz-number ${
            lastFocused === "day" ? "bg-white/50" : "bg-transparent"
          }`}
          onClick={() => setLastFocused("day")}
        >
          <span>{guess.day ?? ""}</span>
        </div>
        <div
          className={`quiz-number ${
            lastFocused === "month" ? "bg-white/50" : "bg-transparent"
          }`}
          onClick={() => setLastFocused("month")}
        >
          <span>{guess.month ?? ""}</span>
        </div>
        <span className="text-lg">Ng√†y</span>
        <span className="text-lg">Th√°ng</span>
      </div>
      <div className="grid grid-cols-3 grid-rows-4 gap-2">
        {Array.from({ length: 9 }).map((_, i) => (
          <button className="numpad-number" onClick={() => addNumber(i + 1)}>
            <span>{i + 1}</span>
          </button>
        ))}
        <button className="numpad-number" onClick={removeNumber}>
          <BackspaceIcon className="w-8" />
        </button>
        <button className="numpad-number" onClick={() => addNumber(0)}>
          <span>0</span>
        </button>
        <button className="numpad-number" onClick={checkGuess}>
          {guessCorrect && !videoReady ? (
            <ArrowPathIcon className="w-8 animate-spin" />
          ) : (
            <OutlinedArrowRightIcon className="w-8" />
          )}
        </button>
      </div>
      <span className="h-1 text-white/75">
        {errorMsg ?? "Nh·∫≠p ng√†y nh·∫≠p th√°ng b·∫•m ‚û°Ô∏è nha."}
      </span>
    </div>
  )
}

function App() {
  const [currentVideoId, setCurrentVideoId] = useState<VideoId | undefined>()
  const [currentVideo, setCurrentVideo] = useState<Video | undefined>()
  const [videoReady, setVideoReady] = useState(false)
  const [showVideo, setShowVideo] = useState(false)
  const handle = useFullScreenHandle()

  useEffect(() => {
    if (currentVideoId) {
      setCurrentVideo(videosMap[currentVideoId])
    } else {
      setCurrentVideo(undefined)
    }
  }, [currentVideoId])

  useEffect(() => {
    setShowVideo(currentVideo !== undefined && videoReady)
  }, [currentVideo, videoReady])

  return (
    <FullScreen
      className="brightness-70 saturate-2 h-[100vh] w-[100vw] overflow-hidden bg-gradient-to-b from-blue-500 to-purple-500 text-white"
      handle={handle}
    >
      <div className={`h-full w-full ${showVideo ? "" : "hidden"}`}>
        <VideoDisplay
          title={currentVideo?.title ?? ""}
          body={currentVideo?.body ?? ""}
          videoLink={currentVideo ? `/videos/${currentVideoId}.mp4` : undefined}
          onContinue={() => {
            setCurrentVideoId(undefined)
            setVideoReady(false)
          }}
          onVideoLoaded={() => setVideoReady(true)}
        />
      </div>
      <div className={`h-full w-full ${!showVideo ? "" : "hidden"}`}>
        <DaysQuiz
          videosMap={videosMap}
          videoReady={videoReady}
          onGuessCorrect={(guess) => setCurrentVideoId(guess)}
        />
      </div>

      {!showVideo && (
        <div className="absolute bottom-0 my-3 flex w-full justify-center">
          <button
            onClick={handle.active ? handle.exit : handle.enter}
            className="rounded-lg bg-white/50 p-2 hover:cursor-pointer"
          >
            {handle.active ? (
              <ArrowsPointingInIcon className="w-6" />
            ) : (
              <ArrowsPointingOutIcon className="w-6" />
            )}
          </button>
        </div>
      )}
    </FullScreen>
  )
}

export default App
